from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Any, Generic, Mapping, Sequence, TypeVar

T = TypeVar("T", contravariant=True)

# --------------------------------------------
# Base Types
# --------------------------------------------


class Type(Generic[T]):
    """
    Base class for a semantic type

    """


class Category:
    """
    Base class for a category of semantic types

    """


class Model:
    """
    Base class for a Computational Model

    """


class Engine:
    """
    Base class for a Computational Engine

    """


class Runtime:
    """
    Base class for an execution context

    """


# --------------------------------------------
# Parameter Definitions
# --------------------------------------------


class Parameter(Generic[T]):
    """
    Base class for a parameter

    """

    value: T
    typing: TypeVar
    required: bool

    def __init__(self, t: TypeVar, v: T) -> None:
        super().__init__()
        self.value = v
        self.typing = t


class RequiredParameter(Parameter[T]):
    """
    Base class for a required parameter

    """

    required = True


class OptionalParameter(Parameter[T]):
    """
    Base class for an optional parameter

    """

    required = False


# --------------------------------------------
# Hyperparameter Definitions
# --------------------------------------------


class Hyperparameter(Generic[T]):
    """
    Base class for a hyperparameter

    """

    value: T
    typing: TypeVar

    def __init__(self, t: TypeVar, v: T) -> None:
        super().__init__()
        self.value = v
        self.typing = t


# --------------------------------------------
# Observable Definitions
# --------------------------------------------


class Observable(Generic[T]):
    """
    Base class for an observation

    """

    value: T
    typing: TypeVar

    def __init__(self, t: TypeVar, v: T) -> None:
        super().__init__()
        self.value = v
        self.typing = t


# --------------------------------------------
# Runnable Definitions
# --------------------------------------------

ArgSet = Sequence[Parameter | Hyperparameter]
ObsSet = Sequence[Observable]
RunSet = tuple[ArgSet, ObsSet]

Observation = Any
OutSet = Sequence[Observation]

ObsMap = Mapping[Observable, Observation]
ObservationSet = Sequence[Sequence[Observable]]


class Runnable(ABC):

    name: str

    def __init__(self, name: str) -> None:
        super().__init__()
        self.name = name

    @abstractmethod
    def prepare(self, *args: ArgSet) -> Sequence[RunSet]:
        """
        Generate run sets for the given arg sets

        """

    @abstractmethod
    def run(self, *args: RunSet, runtime: Runtime) -> Sequence[bool]:
        """
        Execute the run sets on a runtime

        """

    @abstractmethod
    def fetch(self, *args: RunSet, runtime: Runtime, observables: ObsSet | None = None) -> Sequence[ObsMap]:
        """
        Fetch observations generated by the run sets from the runtime

        """
